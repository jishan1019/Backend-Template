openapi: 3.0.0
info:
  title: API Documentation for Hotel Quest
  description: API documentation for user authentication
  version: 1.0.0

servers:
  - url: http://localhost:4000
    description: Development server
  - url: https://hotelquest.onrender.com
    description: Production server

tags:
  - name: Auth
    description: Authentication related endpoints
    name: User
    description: User related endpoints
    name: Rooms
    description: Rooms related endpoints
    name: Booking
    description: Booking related endpoints

paths:
  /api/v1/auth/signin:
    post:
      tags:
        - Auth
      summary: Login User
      description: Endpoint to log in a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@gmail.com
                password:
                  type: string
                  example: 1234
      responses:
        "200":
          description: Successful login response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User login successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 6684d4a5cadee66a0e97a54c
                      name:
                        type: string
                        example: User
                      email:
                        type: string
                        example: user@gmail.com
                      role:
                        type: string
                        example: user
                      phone:
                        type: string
                        example: "1234567890"
                      address:
                        type: string
                        example: "123 Main St, City, Country"
                      isDeleted:
                        type: boolean
                        example: false
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-07-03T04:33:41.334Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-07-03T04:33:41.334Z"
                      __v:
                        type: integer
                        example: 0
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...."

  /api/v1/auth/signup:
    post:
      tags:
        - Auth
      summary: Signup User
      description: Endpoint to sign up a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: User
                email:
                  type: string
                  format: email
                  example: user1@gmail.com
                password:
                  type: string
                  example: password123
                role:
                  type: string
                  example: user  # role can be user or admin
                phone:
                  type: string
                  example: "1234567890"
                address:
                  type: string
                  example: "123 Main St, City, Country"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User is created successfully
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: User
                      email:
                        type: string
                        example: user1@gmail.com
                      password:
                        type: string
                        example: ""
                      role:
                        type: string
                        example: user
                      phone:
                        type: string
                        example: "1234567890"
                      address:
                        type: string
                        example: "123 Main St, City, Country"
                      isDeleted:
                        type: boolean
                        example: false
                      _id:
                        type: string
                        example: 6684f55f4766f4baef72eafa
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-07-03T06:53:19.555Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-07-03T06:53:19.555Z"
                      __v:
                        type: integer
                        example: 0
    post:
      tags:
        - Auth
      summary: Signup User
      description: Endpoint to sign up a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: User
                email:
                  type: string
                  format: email
                  example: user1@gmail.com
                password:
                  type: string
                  example: password123
                phone:
                  type: string
                  example: "1234567890"
                address:
                  type: string
                  example: "123 Main St, City, Country"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User is created successfully
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: User
                      email:
                        type: string
                        example: user1@gmail.com
                      password:
                        type: string
                        example: ""
                      role:
                        type: string
                        example: user
                      phone:
                        type: string
                        example: "1234567890"
                      address:
                        type: string
                        example: "123 Main St, City, Country"
                      isDeleted:
                        type: boolean
                        example: false
                      _id:
                        type: string
                        example: 6684f55f4766f4baef72eafa
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-07-03T06:53:19.555Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-07-03T06:53:19.555Z"
                      __v:
                        type: integer
                        example: 0

  /api/v1/auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Create Refresh Token
      description: Endpoint to generate a new refresh token.
      requestBody:
        required: false
      security:
        - BearerAuth: []  # Apply Bearer authentication
      responses:
        '200':
          description: Refresh token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Refresh token generated successfully
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...."


  /api/v1/users/all-user:
    get:
      tags:
        - User
      summary: Get all users (Admin)
      description: Endpoint to retrieve all users. Requires admin privileges.
      parameters:
        - name: email
          in: query
          schema:
            type: string
          description: Filter users by email (optional)
        - name: role
          in: query
          schema:
            type: string
          description: Filter users by role (optional)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful retrieval of users
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  /api/v1/users/single-user/{_id}:
    get:
      tags:
        - User
      summary: Get Specific User
      description: Retrieve details of a specific user by ID.
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
          description: ID of the user to retrieve.
      responses:
        "200":
          description: Successful retrieval of user
        "404":
          description: User not found
         
  /api/v1/users/update-user/{_id}:
    patch:
      tags:
        - User
      summary: Update User
      description: Update user details by ID.
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
          description: ID of the user to update.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: User
                phone:
                  type: string
                  example: "1234567890"
                address:
                  type: string
                  example: "123 Main St, City, Country"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User updated successfully
        "401":
          description: Unauthorized - Token not provided or invalid
        "404":
          description: User not found

  /api/v1/users/delete-user/{_id}:
    delete:
      tags:
        - User
      summary: Delete User
      description: Delete user by ID.
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
          description: ID of the user to delete.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User deleted successfully
        "401":
          description: Unauthorized - Token not provided or invalid
        "404":
          description: User not found

  /api/v1/users/me:
    get:
      tags:
        - User
      summary: Get Me
      description: Get user details by token.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User details retrieved successfully
        "401":
          description: Unauthorized - Token not provided or invalid
        "404":
          description: User not found


# Room

  /api/v1/rooms/all-room:
    get:
      tags:
        - Rooms
      summary: Get all rooms (Admin, User)
      description: Endpoint to retrieve all rooms. Requires admin and user privileges.
      parameters:
        - name: isBooked
          in: query
          schema:
            type: boolean
          description: Filter rooms by booking status (optional)
        - name: pricePerNight
          in: query
          schema:
            type: number
          description: Filter rooms by price per night (optional)
        - name: type
          in: query
          schema:
            type: string
          description: Filter rooms by type (optional)
        - name: roomNo
          in: query
          schema:
            type: string
          description: Filter rooms by room number (optional)
        - name: searchTerm
          in: query
          schema:
            type: string
          description: Search term for rooms (optional)
      responses:
        "200":
          description: Successful retrieval of rooms
        "404":
          description: Not Found

  /api/v1/rooms/single-room/{id}:
    get:
      tags:
        - Rooms
      summary: Get Specific Room
      description: Retrieve details of a specific room by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the room to retrieve.
      responses:
        "200":
          description: Successful retrieval of room
        "404":
          description: Room not found

  /api/v1/rooms/create-room:
    post:
      tags:
        - Rooms
      summary: Create Room
      description: Create a new room (Admin only).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomNo:
                  type: integer
                  example: 104
                type:
                  type: string
                  example: single
                description:
                  type: string
                  example: This is a single room
                pricePerNight:
                  type: number
                  example: 200
      responses:
        "201":
          description: Room created successfully
        "400":
          description: Bad Request

  /api/v1/rooms/update-room/{id}:
    put:
      tags:
        - Rooms
      summary: Update room
      description: Update room details by ID (Admin only).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the room to update.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: single
                description:
                  type: string
                  example: This is a single room
                pricePerNight:
                  type: number
                  example: 100
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Room updated successfully
        "404":
          description: Room not found

  /api/v1/rooms/delete-room/{id}:
    delete:
      tags:
        - Rooms
      summary: Delete room
      description: Endpoint to delete a room by ID. Requires admin privileges.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the room to delete.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Room deleted successfully
        "404":
          description: Room not found


# Booking

  /api/v1/bookings/all-booking:
    get:
      tags:
        - Booking
      summary: Get All Booking
      description: Retrieve all bookings. Requires admin privileges.
      parameters:
        - name: bookingStatus
          in: query
          schema:
            type: string
          description: Filter bookings by status (optional)
        - name: totalCost
          in: query
          schema:
            type: number
          description: Filter bookings by total cost (optional)
        - name: cancelledAt
          in: query
          schema:
            type: string
            format: date-time
          description: Filter bookings by cancellation date (optional)
        - name: checkOutAt
          in: query
          schema:
            type: string
            format: date-time
          description: Filter bookings by check-out date (optional)
        - name: checkInAt
          in: query
          schema:
            type: string
            format: date-time
          description: Filter bookings by check-in date (optional)
        - name: bookedAt
          in: query
          schema:
            type: string
            format: date-time
          description: Filter bookings by booking date (optional)
        - name: id
          in: query
          schema:
            type: string
          description: Filter bookings by ID (optional)
        - name: searchTerm
          in: query
          schema:
            type: string
          description: Search term for bookings (optional)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful retrieval of bookings
        "404":
          description: Not Found

  /api/v1/bookings/single-booking/{id}:
    get:
      tags:
        - Booking
      summary: Get Single Booking
      description: Retrieve details of a specific booking by ID. Requires admin privileges.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the booking to retrieve.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful retrieval of booking
        "404":
          description: Booking not found

  /api/v1/bookings/my-bookings:
    get:
      tags:
        - Booking
      summary: Get User Booking History
      description: Retrieve booking history for the authenticated user.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful retrieval of user bookings
        "404":
          description: No bookings found for the user

  /api/v1/bookings/create-bookings:
    post:
      tags:
        - Booking
      summary: Create Booking
      description: Create a new booking for the authenticated user.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                room:
                  type: string
                  example: "6685162f16a66ea12dd68a49"
                  description: ID of the room to book
                bookedAt:
                  type: string
                  example: "2024-07-03"
                  format: date
                  description: Date of the booking (YYYY-MM-DD)
      responses:
        "201":
          description: Booking created successfully
        "400":
          description: Invalid request body or parameters

  /api/v1/bookings/check-in:
    patch:
      tags:
        - Booking
      summary: Check In Booking
      description: Update the check-in status of a booking by ID. Requires admin privileges.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                  example: "668513f324991443e113bb9e"
                  description: ID of the booking to check-in
      responses:
        "200":
          description: Booking check-in successful
        "400":
          description: Invalid request body or parameters
        "404":
          description: Booking not found

  /api/v1/bookings/check-out:
    patch:
      tags:
        - Booking
      summary: Check Out Booking
      description: Update the check-out status of a booking by ID. Requires admin privileges.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                  example: "668513f324991443e113bb9e"
                  description: ID of the booking to check-out
      responses:
        "200":
          description: Booking check-out successful
        "400":
          description: Invalid request body or parameters
        "404":
          description: Booking not found

  /api/v1/bookings/cancel-booking:
    patch:
      tags:
        - Booking
      summary: Cancel Booking
      description: Cancel a booking by ID. Requires user privileges.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId:
                  type: string
                  example: "668513f324991443e113bb9e"
                  description: ID of the booking to cancel
      responses:
        "200":
          description: Booking cancellation successful
        "400":
          description: Invalid request body or parameters
        "404":
          description: Booking not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer